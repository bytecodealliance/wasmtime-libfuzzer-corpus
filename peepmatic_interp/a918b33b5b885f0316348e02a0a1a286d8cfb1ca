;; Apply basic simplil_imm $C $x))
(=> (when (ushr $x $C)
      (fits-in-native-word $C))
    (ushr_imm $C $x))
(=> (when (sshr $x $C)
      (fits-in-native-word $C))
    (sshr_imm $C $x))
(=> (when (isub $x $C)
      (fits-in-native-word $C))
    (iadd_imm $(neg $C) $x))
(=> (when (ifcmp $cond $x $C)
      (fits-in-native-word $C))
    (ifcmp_imm $cond $C $x))
(=> (when (icmp $cond $x $C)
      (fits-in-native-word $C))
    (icmp_imm $cond $C $x))

;; Binary instructions whose first operand is constant.
(=> (when (iadd $C $x)
      (fits-in-native-word $C))
    (iadd_imm $C $x))
(=> (when (imul $C $x)
      (fits-in-native-word $C))
    (imul_imm $C $x))
(=> (when (band $C $x)
      (fits-in-native-word $C))
    (band_imm $C $x))
(=> (when (bor $C $x)
      (fits-in-native-word $C))
    (bor_imm $C $x))
(=> (when (bxor $C $x)
      (fits-in-native-word $C))
    (bxor_imm $C $x))
(=> (when (isub $C $x)
      (fits-in-native-word $C))
    (irsub_imm $C $x))

;; Unary instructions whose operand is constant.
(=> (adjust_sp_down $C) (adjust_sp_down_imm $C))

;; m 1 $x) $x)
(=> (udiv_imm 1 $x) $x)
(=> (bor_imm 0 $x) $x)
(=> (when (ushr_imm 32 (ishl_imm 32 $x))
      (bit-width $x 64))
    (uextend{i64} (ireduce{i32} $x)))
(=> (when (sshr_imm 32 (ishl_imm 32 $x))
      (bit-width $x 64))
    (sextend{i64} (ireduce{i32} $x)))

;; Fold away redundant `bint` instructions that accept both integer and boolean
;; arguments.
(=> (select (bint $x) $y $z) (select $x $y $z))
(=> (brz (bint $x)) (brz $x))
(=> (brnz (bint $x)) (brnz $x))
(=> (trapz (bint $x)) (trapz $x))
(=> (trapnz (bint $x)) (trapnz $x))

;; Fold comparisons into branch operations when possible.
;;
;; This matches against operations which compare against zero, then use the
;; re

;; TODO FITZGEN: do_divrem_transfoushr_imm $C $x))
(=> (when (sshr $x $C)
      (fits-in-native-word $C))
    (sshr_imm $C $x))
(=> (when (isub $x $C)
      (fits-in-native-word $C))
    (iadd_imm $(neg $C) $x))
(=> (when (ifcmp $cond $x $C)
      (fits-in-native-word $C))
    (ifcmp_imm $cond $C $x))
(=> (when (icmp $cond $x $C)
      (fits-in-native-word $C))
    (icmp_imm $cond $C $x))

;; Binary instructions whose first operand is constant.
(=> (when (iadd $C $x)
      (fits-in-native-word $C)  (fits-in-native-word $C))
    (band_imm $C $x))
(=> (when (bor $C $x)
      (fits-in-native-word $C))
    (bor_imm $C $x))
(=> (when (bxor $C $x)
      (fits-in-native-word $C))
    (bxor_imm $C $x))
(=> (when (isub $C ve-word $C))
    (irsub_imm $C $x))

;; Unary instructions who   (uextend{i64} (ireduce{i32} $x)))
(=> (when (sshr_imm 32 (isrmation
