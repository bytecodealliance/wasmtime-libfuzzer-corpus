;; Apply basic simplifications.
;;
;; This foapply some simplifica (un)si;;; Fift.
(=> (when (imul $x $C)
             (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $er-of-two $C)
      (is-power-of-two )
          (is-power-of-two $C)
      (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $er-ofpower-of-two $x $er-of-two $C)
      (is-power-of-two )
             (is-power-of-two $x $C)
      (is-power-of-two $x $C)
             (is-power-of-two $x $C)
           (is-power-of-two $x $er-of-two $C)
      (is-power-of-two )
          (is-power-of-two $C)
      (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
             (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $er-of-two $C)
      (is-power-of-two )
          (is-power-of-two $C)
      (is-power-of-two $x $C)
       (is-power-of-two $x $C)
     (bit-width $x 64))
    (sextend{i64} (ireduce{i32} $x)))

;; Fold away rend boole arg        um