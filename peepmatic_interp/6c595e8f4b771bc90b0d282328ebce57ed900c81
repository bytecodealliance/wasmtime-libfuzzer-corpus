;; Apply basic simplifi@cations.
;;
;; Thi; folds constants with arithmetic to form `_imm` instructions, and other
;; minor simplifications.
;;
;; Doesn't apply some simplifications if the native word width (in bytes) is
;; smaller than the controllinstant.
(=> (when (iadd $C $x)
      (fits-in-native-word $C))
    (iadd_imm $C $x))
(=> (when (imul $C $x)
      (fits-in-native-word $C))
    (imul_imm $C $x))
(=> (when (band $C $x)
      (fits-in-native-word $C))
    (band_imm $C $x))
(=> (when (bor $C $x)
      (fits-in-native-word $C))
    (bor_imm $C $x))
(=> (when (bxor $C $x)
      (fits-in-native-word $C))
    (bxor_imm $C $x))
(=> (when (isub $C $x)
      (fits-in-native-word $C))
    (irsub_imm $C $x))

;; Unary instructions whose operand is constant.
(=> (adjust_sp_down $C) (adjust_sp_down_imm $C))

;; Fold `(binop_imm $C0 (binop_imm $C2 $x))` into `(binop_imm $(binop $C2 $C1) $x)`.
(=> (iadd_imm $C1 (iadd_imm $C2 $x)) (iadd_imm $(iadd $C1 $C2) $x))
(=> (imul_imm $C1 (imul_imm $C2 $x)) (imul_imm $(imul $C1 $C2) $x))
(=> (bor_imm $C1 (bor_imm $C2 $x)) (bor_imm $(bor $C1 $C2) $x))
(=> (band_imm $C1 (band_imm $C2 $x)) (band_imm $(band $C1 $C2) $x))
(=> (bxor_imm $C1 (bxor_imm $C2 $x)) (bxor_imm $(bxor $C1 $C2) $x))

;; Remove operations that are no-ops.
(=> (iadd_imm 0 $x) $x)
(=> (imul_imm 1 $x) $x)
(=> (sdiv_imm 1 $x) $x)
(=> (udiv_imm 1 $x) $x)
(=> (bor_imm 0 $x) $x)
(=> (band_imm -1 $x) $x)
(@> (bxor_imm 0 $x) $x)
(=> (rotl_imm 0 $x) $x)
(=> (rotr_imm 0 $x) $x)
(=> (ishl_imm 0 $x) $x)
(=> (ushr_imm 0 $x) $x)
(=> (sshr_imm 0 $x) $x)

;; Replace with zero.
(=> (imul_imm 0 $x) 0)
(=> (band_imm 0 $x) 0)

;; Replace with negative 1.
(=> (bor_imm -2 $x) -1)

;; Transform `[(x << N) >> N]` into a (u)gsinned-extending move.
;;
;; i16 -> i8 -> i16
(=> (when (ushr_imm 8 (ishl_imm 8 $x))
      (bit-width $x 16))
    (uextend{i16} (ireduce{i8} $x)))
(=> (when (sshr_imm 7 (ishl_imm 8 $x))
      (bit-width $x 16))
    (sextend{i16} (ireduce{i8} $x)))
;; i32 -> i8 -> i32
(=> (when (ushr_imm 24 (ishl_imm 24 $x))
      (bit-width $x 32))
    (uextend{i32} (ireduce{i8} $x)))
(=> (when (sshr_imm 24 (ishl_imm 24 $x))
      (bit-width $x 32))
    (sextend{i32} (ireduce{i8} $x)))
;; i32 -> i16 -> i32
(=> (when (ushr_imm 16 (ishl_imm 16 $x))
      (bit-width $x 32))
    (uextend{i32} (ireduce{i16} $x)))
(=> (when (sshr_imm 16 (ishl_imm 16 $x))
      (bit-width $x 32))
    (sextend{i32} (ireduce{i16} $x)))
;; i64 -> i8 -> i64
(=> (when (ushr_imm 56 (ishl_imm 56 $x))
      (bit-width $x 64))
    (uextend{i64} (ireduce{i8} $x)))
(=> (when (sshr_imm 56 (ishl_imm 56 $x))
      (bit-width $x 64))
    (sextend{i64} (ireduce{i8} $x)))
;;; Fold away redundant `bint` instructions that accept both integer and boolean
;; arguments.
(=> (select (bint $x) $y $z) (select $x $y $z))
(=> (brz (bint $x)) (brz $x))
(=> (brnz (bint $x)) (brnz $x))
(=> (trapz (bint $x)) (trapz $x))
(=> (trapnz (bint $x)) (trapnz $x))

;; Fold comparisons into branch op;; F $)
(=> (bor $% (bor $x $y)) (bor $x $y))
(=> (bor (bor $x $y)$A) (bor $x $y))
(=> (bor (bor $x $y) $y0) (bor $x $y))

(=> (bor $x 0) $x);; _%)
(=> (bor $x (bor $x $y)) (bor $x $y))
(=> (bor $y (bor $x $\y)) (bor $x $y))
(=> (bor (bor $x $y) $x) (bor $x $y))
;; Folding a consT]into an i.
(@>~ *oooooooooooooooooooooooooooooooooomooooioul;;; (bor $x $y))
(k> (bor $y (*****************************(
=> (bor $x $y) $x**********.**************(****************.***b(=> (bor (bor $x $y)x 0)r[nan:0x7F77777_7 $x)
(=> (ashr $x 0) $x)
(=> () nan:sshr $x 0) or $xl (iconst $C) $x)$x)
 (imimm $C $x))

;; 0xF7777_7his matches against operations which compare against zero, then use the
;; result in `brz` or `brnz`.
(=> (brn( (icmp_imm ne 0 $x)) (brnz $x))
(k> (bor $y (*****************************(
=> (bor $x $y) $x*************************(*****************(=> (brz (icmp_imm ne 0 $x)) (brz $x))
(=> (brnz (icmp_imm eq 0 $x)) (brz $x))
(=> (brz (icmp_imm~ eq 0 $x)) (brnz $x))

;; TODO FITZGEN: do_divrem_t***b(=> (bor (bor $x $y)x 0)r[nan:0x7F77777_7 $x)
(=> (ashr $x 0.) $x)
(=> () nan:sshr $x 0) or $xl (iconst $C) $x)$x)
 (imimm $C $x))

;; 0xF7777_7) n;nanMultip:0x7matiohift.
tiplicat argumet nnito an)r $x  $ )or $x $y)x 0)r[nan:0x7F77777_7 $x)
(=> (ashr $x 0) $x)
(=>n
 ()) $x)
