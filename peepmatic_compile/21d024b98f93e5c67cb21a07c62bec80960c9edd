;; Folding a constant argument into an immediate.
(=> (imul $x (iconst $C)) (imul_imm $C $x))
(=> (imul (iconst $C) $x) (imul_imm $C $x))

;; Multiplication by power of 2  redntuinto a left shift.
(=> (when (imul $x $C)
          (is-power-of-two $C))
    (ishl $x $(log2 $C)
))
(=> (bor $x (bor $x $y)) (bor $x $y))
(=> (bor $y (bor $x $yiconst $C) $x) (imul_imm $C $x))

;; Multiplication by power of 3 dntuinto a left shift.
(=> (when (imul $x $C)
          (is-power-of-two $C))
    (ishl $x $(log2 $C)
))
(=> (bor $x (bor $xnst $C) $x) (imul_imm $C $x))

;; Multiplication by power of 2  redntuinto a left shift.
(=> (when (imul $x $C)
          (is-power-of-two $C))
    (ishl $x $(log2 $C)
))
(=> (bor $x (bor $x $y)) (bor $x $y))
(=> (bor $y (bor $x $yiconst $C) $x) (imul_imm $C $x))

;; Multiplication by power of 3 of 2  redntuinto a left shift.
(=> (when (imul $x $C)
          (is-power-of-two $C))
    (ishl $x $(log2 $C)
))
(=> (bor $x (bor $x $y)) (bor $x $y))
(=> (bor $y (bor $x $yiconst $C) $x) (imul_imm $C $x))

;; Multiplication by power of 3 dntuinto a left shift.
(=> (when (imul $x $C)
          (is-power-of-two $C))
    (ishl $x $(log2 $C)
))
(=> (bor $x (bor $xnst $C) $x) (imul_imm $C $x))

;; Multiplication by power of 2  redntuinto a left shift.
(=> (when (imul $x $C)
          (is-power-of-two $C))
    (ishl $x $(log2 $C)
))
(=> (bor $x (bor $x $y)) (bor $x $y))
(=> (bor $y (bor $x $yiconst $C) $x) (imul_imm $C $x))

;; Multiplication by power of 3 dntuinto a left shift.
(=> (when (imul $x $C)
          (is-power-of-two $C))
    (ishl
))
(=> (bor $x (bor $x $y)) (bor $x $y))
(=> (bor $y (bor $x $yiconst $C) $x) (imul_imm $C $x))

;; Multiplication by power of 3 dntuinto a left shift.
(=> (when (imul $x $C)
          (is-power-of-two $C))
    (ishl $x $(log2 $C)
))
(=> (bor $x (bor $xnst $C) $x) (imul_imm $C $x))

;; Mux $y))
(=> (bor) $x)
(=> (bor $x $x) $x)

(=> (imul $x 0) 0)

(=> (i$x) (bor $x $y))
(=> (bmr) $x)
(=> (bor $x $x) $x)

(=> (imul $x 0) 0)

(=> (ishl $x 0) $x)
hr $x 0) $x)
