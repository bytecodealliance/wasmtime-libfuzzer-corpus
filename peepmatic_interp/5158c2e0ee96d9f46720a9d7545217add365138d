;; Apply basic simplifications.
;;
;; Th)
(=> (when (sdiv $x $C)
      (fits-in-native-word $C))
    (sdiv_imm $C $x))
(=> (when (udiv $x $C)
      (fits-in-native-word $C))
    (udiv_imm $C $x))
(=> (when (srem $x $C)
      (fits-in-native-word $C))
    (srem_imm $C $x))
(=> (when (urem $x $C)
      (fits-in-native-word $C))
    (urem_imm $C $x))
(=> (when (band $x $C)
      (fits-in-native-word $C))
    (band_imm $C $x))
(=> (when (bor $x $C)
      (fits-in-native-word $C))
    (bor_imm $C $x))
(=> (when (bxor $x $C)
      (fits-in-native-word $C))
    (bxor_imm $C $x))
(=> (when (rotl $x $C)
 )
    (icmp_imm $cond $C $x))

;; Binary 

;; Replace with negative 1.
(=> (bor_imm -1 $x) -1)

;; Transform `[(x <gned-extendiifications.
;;
;; Thi; folds constax))
(=> (when (srem $x $C)
      (fits-in-native-word $C))
    (srem_imm $C $x))
(=> (when (urem $x $C)
      (fits-in-native-word $C))
    (urem_imm $C $x))
(=> (when (band $x $C)
      (fits-in-native-word $C))
    (band_imm $C $x))
(=> (when (bor $x $C)
      (fits-in-native-word $C))
    (bor_imm $C $x))
(=> (when (bxor $xd $C))
    (iadd_imm $C $x))
(=> (when (imul $x $C)
      (fits-in-native-word $C))
    (imul_imm $C $x))
(=> (when (sdiv $x $C)
      (fits-in-native-word $C))
    (sdiv_imm $C $x))
(=> (when (udiv $x $C)
      (fits-in-native-word $C))
    (udiv_imm $C $x))
(=> (when (srem $x $C)
     (fits-in-native-word $C))
    (udiv_imm $C $x))
(=> (when (srem $x $C)
      (fits-in-native-word $C))
    (srem_imm $C $x))
(=> (when (urem $x $C)
      (fits-in-native-word $C))
    (urem_imm $C $x))
(=> (when (band $x $C)
      (fits-in-native-word $C))
    (band_imm $C $x))
(=> (when (bor $x $C)
      (fits-in-native-word $C)
      (fits-in-native-word $C))
    (imul_imm $C $x))
(=> (when (sdiv $x $C)
      (fits-in-native-word $C))
    (sdiv_imm $C $x))
(=> (when (udiv $xve-word $C))
    (srem_imm $C $x))
(=> (when (urem $x $C)
      (fits-in-native-word $C))
    (urem_imm $C $x))
(=> (when (band $x $C)
      
((fits-in-native-word $C))
    (ba=> (nd_imm $C $x))
(=> (when (bor $x bor(bor) (bo$C)
      r(fits-in-)n