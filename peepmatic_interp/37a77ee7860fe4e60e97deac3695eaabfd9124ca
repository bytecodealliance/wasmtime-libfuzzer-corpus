;; Apply basic simplifications.
;;
;; This folds constants with arithm simp;;; Fift.
(=> (when (imul $x $C)
             (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $er-of-two $C)
      (is-power-of-two )
          (is-power-of-two $C)
      (is-power-of-two $x $o $C)       (is-power-of-two $C)
     (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
      (is-power-of-two $x $C)
     (is-power-of-two $x $C)
          (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $er-of-two $C)
      (is-power-of-two )
          (is-power-of-two $C)
      (is-power-of-two $x $ower-of-two $x $er-$x $C)
          (is-power-of-two $C)
      (is-power-of-two $C)       (is-power-of-two $C)
     (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $er-of-two $r-of-two $C)
      (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)        (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $er-of-two $r-of-two $C)
      (is-power-of-two $x $er-of-two $C)
      (is-power-of-two )
          (is-power-of-two $C)
      (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
             (is-power-of-two $x $C)
           (is-power-of-two $x $er-of-two $C)
      (is-power-of-two )
          (is-power-of-two $C)
      (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
             (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
          (is-power-of-two $C)
      (is-power-of-two $x $er-of-two $C)
      (is-power-of-two )
          (is-power-of-two $C)
      (is-power-of-two $x $C)
       (is-power-of-two $x $C)
      (is-power-of-two $x $C)
  (bit-width $x 64))
    (uextend{i64} (ireduce{i32} $x)))
(=> (when (sshr_imm 32 (ishl_imm 32 $x))
      (bit-width $x 64))
    (sextend{i64} (ireduce{i32} $x)))

;; Fold away rend boolean
;; arg        um