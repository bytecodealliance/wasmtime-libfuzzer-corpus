
(=>(imul $x (iconst $C)) (imul $x (iconst $C)))
;; F %)
(=> (bor $% (bor $x $y)) (bor $x $y))
(=> (bor (bor $x $y)$A) (bor $x $y))
(=> (bor (bor $x $y) $y) (bor $x $y))

(=>(bor $x 0) $x);; %_)
(=> (bor $x (bor $x $y)) (bor $x $y))
(=> (bor $y (bor $x $\y)) (bor $x $y))
(=> (bor (bor $x1 $y) $x) (bor $x $y))
;; Folding a con
(=> (bor $x $y) 5)
(=> (imul $x 1) $x)

(=> (iadd $x 0) $x)
(=> (ishl $x 0) $x)
(=> (sshr $x 0) $x)
;; Apnd $C $x)
(=> (when (icmp $cond $x $C)
      (fits-in-native-word $C))
    (icmp_imm $cond $C $x))

;; Binary instructiouce{i8} $x)))
(=> (when (sshr_imm 24 (ishl_imm 24 $x))
      (bit-width $x 32))
    (sextend{i32} (ireduce{i8} $x)))
;; i32 -> i16 -> i32
(=> (when (ushr_imm 16 (ishl_imm 16 $x))
      (bit-width $x 32))
    (uextend{i32} (ireduce{i16} $x)))
(=> (when (sshr_imm 16 (ishl_imm 16 $x))
      (bit-width $x 32))
    (sextend{i32} (ireduce{i16} $x)))
;; i64 -> i8 -> i64
(=> (when (ushr_imm 56 (ishl_imm 56 $x))
      (bit-width $x 64))
    (uextend{i64} (ireduce{i8} $x)))
(=> (when (sshr_imm 56 (ishl_imm 56 $x))
      (bit-width $x 64))
    (sextend{i64} (ireduce{i8} $x)))
;; i64 -> i16 -> i64
(=> (when (ushr_imm 48 (ishl_imm 48 $x))
      (bit-width $x 64))
    (uextend{i64} (ireduce{i16} $x)))
(=> (when (sshr_imm 48 (ishl_imm 48 $x))
      (bit-width $x 64))
    (sextend{i64} (ireduce{i16} $x)))
;; i64 -> {i64} (ireduce{i32} $x)))

;; Fold awa